{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Sobre o Projeto ETL de arquivos de extens\u00f5es diversas O projeto visa o aprendizado de trabalho com extra\u00e7\u00e3o, transforma\u00e7\u00e3o e carregamendo de dados vindos de fontes como .csv, .json e .xml. Objetivos O objetivo principal \u00e9 manter um projeto coeso, documentado e que sirva de consulta para ferramentas como bibliotecas comuns em etls, documenta\u00e7\u00e3o, uso de ambiente virtual e versionamento de codigo. Como executar o projeto 1 \u2013 Clonar o Repositorio: git clone https://github.com/LeoGrochoski/extracao_dados_clientes 2 - Iniciar o ambiente Virtual: python -m venv .venv 3 \u2013 Instalar as bibliotecas do projeto, pode verificar no arquivo requirements.txt. 4 \u2013 Caso queira utilizar o script para gerar dados sint\u00e9ticos, rodar o script gerar_dados.py: python gerar_dados.py 5 \u2013 Para rodar o codigo de carregamento do ETL, ele j\u00e1 executa automaticamente a extra\u00e7\u00e3o e transforma\u00e7\u00e3o, arquivo carregamento_dados.py: python carregamento_dados.py 6 - \u00c9 gerado o arquivo dados_clientes_tratados.csv no diretorio \"data\" contendo os dados tratados. 7 - Tamb\u00e9m \u00e9 gerado o arquivo de log: arquivo_log.txt Principais bibliotecas e suas vers\u00f5es Python 3.12.1 Pandas 2.2.2 MKDocs 1.60 Markdown 3.6 Unidecode 1.3.8","title":"Sobre o Projeto"},{"location":"#sobre-o-projeto","text":"","title":"Sobre o Projeto"},{"location":"#etl-de-arquivos-de-extensoes-diversas","text":"O projeto visa o aprendizado de trabalho com extra\u00e7\u00e3o, transforma\u00e7\u00e3o e carregamendo de dados vindos de fontes como .csv, .json e .xml.","title":"ETL de arquivos de extens\u00f5es diversas"},{"location":"#objetivos","text":"O objetivo principal \u00e9 manter um projeto coeso, documentado e que sirva de consulta para ferramentas como bibliotecas comuns em etls, documenta\u00e7\u00e3o, uso de ambiente virtual e versionamento de codigo.","title":"Objetivos"},{"location":"#como-executar-o-projeto","text":"1 \u2013 Clonar o Repositorio: git clone https://github.com/LeoGrochoski/extracao_dados_clientes 2 - Iniciar o ambiente Virtual: python -m venv .venv 3 \u2013 Instalar as bibliotecas do projeto, pode verificar no arquivo requirements.txt. 4 \u2013 Caso queira utilizar o script para gerar dados sint\u00e9ticos, rodar o script gerar_dados.py: python gerar_dados.py 5 \u2013 Para rodar o codigo de carregamento do ETL, ele j\u00e1 executa automaticamente a extra\u00e7\u00e3o e transforma\u00e7\u00e3o, arquivo carregamento_dados.py: python carregamento_dados.py 6 - \u00c9 gerado o arquivo dados_clientes_tratados.csv no diretorio \"data\" contendo os dados tratados. 7 - Tamb\u00e9m \u00e9 gerado o arquivo de log: arquivo_log.txt","title":"Como executar o projeto"},{"location":"#principais-bibliotecas-e-suas-versoes","text":"Python 3.12.1 Pandas 2.2.2 MKDocs 1.60 Markdown 3.6 Unidecode 1.3.8","title":"Principais bibliotecas e suas vers\u00f5es"},{"location":"geracao_dados/","text":"Cria\u00e7\u00e3o de Dados Biblioteca Faker Utilizei a biblioteca faker para gera\u00e7\u00e3o dos dados sinteticos de clientes. Consegui gerar dados como nome, endereco, telefone, email e renda. Utilizei a biblioteca e gerei dados em formatos diferentes, .csv, .json e .xml Arquivos CSV (Comma-Separated Values) Formato: Arquivo de texto simples onde os valores s\u00e3o separados por v\u00edrgulas (ou outro delimitador como ponto e v\u00edrgula). Cada linha do arquivo representa um registro de dados. A primeira linha geralmente cont\u00e9m os cabe\u00e7alhos das colunas. Uso: Amplamente utilizado para exportar e importar dados em tabelas de banco de dados e planilhas. F\u00e1cil de ler e escrever para scripts e programas. Vantagens: Simplicidade e legibilidade. Compatibilidade com muitos sistemas e ferramentas. Desvantagens: N\u00e3o suporta estruturas de dados complexas (apenas tabelas simples). Falta de suporte para tipos de dados (tudo \u00e9 texto). XML (eXtensible Markup Language) Formato: Formato de texto estruturado usando tags aninhadas, semelhante ao HTML. As tags definem a estrutura e a hierarquia dos dados. Suporta atributos para fornecer informa\u00e7\u00f5es adicionais sobre os elementos. Uso: Utilizado em v\u00e1rias aplica\u00e7\u00f5es para armazenar e transportar dados. Comumente usado em web services (SOAP) e configura\u00e7\u00f5es de software. Vantagens: Flex\u00edvel e extens\u00edvel, capaz de representar estruturas de dados complexas. Facilmente leg\u00edvel por humanos e m\u00e1quinas. Desvantagens: Verbosidade pode levar a arquivos grandes e de processamento lento. Mais complexo de analisar e gerar em compara\u00e7\u00e3o com CSV e JSON. JSON (JavaScript Object Notation) Formato: Formato de texto leve para interc\u00e2mbio de dados, baseado na sintaxe de objetos do JavaScript. Representa dados como pares de chave-valor e arrays. Uso: Popular em APIs web (especialmente RESTful APIs) para enviar e receber dados. Comumente usado em aplica\u00e7\u00f5es web para transmiss\u00e3o de dados entre servidor e cliente. Vantagens: Estrutura simples e compacta. Nativamente suportado em muitas linguagens de programa\u00e7\u00e3o, especialmente JavaScript. Suporta dados aninhados e complexos. Desvantagens: Pode n\u00e3o ser t\u00e3o eficiente em termos de espa\u00e7o como CSV para dados tabulares simples. A falta de coment\u00e1rios pode dificultar a legibilidade em arquivos grandes.","title":"Cria\u00e7\u00e3o de Dados"},{"location":"geracao_dados/#criacao-de-dados","text":"","title":"Cria\u00e7\u00e3o de Dados"},{"location":"geracao_dados/#biblioteca-faker","text":"Utilizei a biblioteca faker para gera\u00e7\u00e3o dos dados sinteticos de clientes. Consegui gerar dados como nome, endereco, telefone, email e renda. Utilizei a biblioteca e gerei dados em formatos diferentes, .csv, .json e .xml","title":"Biblioteca Faker"},{"location":"geracao_dados/#arquivos","text":"","title":"Arquivos"},{"location":"geracao_dados/#csv-comma-separated-values","text":"","title":"CSV (Comma-Separated Values)"},{"location":"geracao_dados/#formato","text":"Arquivo de texto simples onde os valores s\u00e3o separados por v\u00edrgulas (ou outro delimitador como ponto e v\u00edrgula). Cada linha do arquivo representa um registro de dados. A primeira linha geralmente cont\u00e9m os cabe\u00e7alhos das colunas.","title":"Formato:"},{"location":"geracao_dados/#uso","text":"Amplamente utilizado para exportar e importar dados em tabelas de banco de dados e planilhas. F\u00e1cil de ler e escrever para scripts e programas.","title":"Uso:"},{"location":"geracao_dados/#vantagens","text":"Simplicidade e legibilidade. Compatibilidade com muitos sistemas e ferramentas.","title":"Vantagens:"},{"location":"geracao_dados/#desvantagens","text":"N\u00e3o suporta estruturas de dados complexas (apenas tabelas simples). Falta de suporte para tipos de dados (tudo \u00e9 texto).","title":"Desvantagens:"},{"location":"geracao_dados/#xml-extensible-markup-language","text":"","title":"XML (eXtensible Markup Language)"},{"location":"geracao_dados/#formato_1","text":"Formato de texto estruturado usando tags aninhadas, semelhante ao HTML. As tags definem a estrutura e a hierarquia dos dados. Suporta atributos para fornecer informa\u00e7\u00f5es adicionais sobre os elementos.","title":"Formato:"},{"location":"geracao_dados/#uso_1","text":"Utilizado em v\u00e1rias aplica\u00e7\u00f5es para armazenar e transportar dados. Comumente usado em web services (SOAP) e configura\u00e7\u00f5es de software.","title":"Uso:"},{"location":"geracao_dados/#vantagens_1","text":"Flex\u00edvel e extens\u00edvel, capaz de representar estruturas de dados complexas. Facilmente leg\u00edvel por humanos e m\u00e1quinas.","title":"Vantagens:"},{"location":"geracao_dados/#desvantagens_1","text":"Verbosidade pode levar a arquivos grandes e de processamento lento. Mais complexo de analisar e gerar em compara\u00e7\u00e3o com CSV e JSON.","title":"Desvantagens:"},{"location":"geracao_dados/#json-javascript-object-notation","text":"","title":"JSON (JavaScript Object Notation)"},{"location":"geracao_dados/#formato_2","text":"Formato de texto leve para interc\u00e2mbio de dados, baseado na sintaxe de objetos do JavaScript. Representa dados como pares de chave-valor e arrays.","title":"Formato:"},{"location":"geracao_dados/#uso_2","text":"Popular em APIs web (especialmente RESTful APIs) para enviar e receber dados. Comumente usado em aplica\u00e7\u00f5es web para transmiss\u00e3o de dados entre servidor e cliente.","title":"Uso:"},{"location":"geracao_dados/#vantagens_2","text":"Estrutura simples e compacta. Nativamente suportado em muitas linguagens de programa\u00e7\u00e3o, especialmente JavaScript. Suporta dados aninhados e complexos.","title":"Vantagens:"},{"location":"geracao_dados/#desvantagens_2","text":"Pode n\u00e3o ser t\u00e3o eficiente em termos de espa\u00e7o como CSV para dados tabulares simples. A falta de coment\u00e1rios pode dificultar a legibilidade em arquivos grandes.","title":"Desvantagens:"}]}